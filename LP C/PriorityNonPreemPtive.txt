
import java.util.*;

class priorityNONPreemptive {
    static class Process {
        int id;
        int arrivalTime;
        int burstTime;
        int priority;
        int startTime;
        int completionTime;
        int waitingTime;
        int turnAroundTime;

        public Process(int id, int arrivalTime, int burstTime, int priority) {
            this.id = id;
            this.arrivalTime = arrivalTime;
            this.burstTime = burstTime;
            this.priority = priority;
        }
    }

    public static void main(String[] args) {
        List<Process> processes = new ArrayList<>();
        processes.add(new Process(1, 0, 5, 2));
        processes.add(new Process(2, 1, 3, 1));
        processes.add(new Process(3, 2, 8, 3));
        processes.add(new Process(4, 3, 6, 0));

        nonPreemptivePriorityScheduling(processes);
    }

    public static void nonPreemptivePriorityScheduling(List<Process> processes) {
        int currentTime = 0;
        processes.sort(Comparator.comparingInt(p -> p.arrivalTime)); // Sort by arrival time

        List<Process> readyQueue = new ArrayList<>();
        int completedProcesses = 0;

        while (completedProcesses < processes.size()) {
            // Add all arrived processes to the ready queue
            for (Process p : processes) {
                if (p.arrivalTime <= currentTime && !readyQueue.contains(p) && p.completionTime == 0) {
                    readyQueue.add(p);
                }
            }

            // Select process with highest priority (lowest priority number)
            Process highestPriorityProcess = readyQueue.stream()
                .min(Comparator.comparingInt(p -> p.priority))
                .orElse(null);

            if (highestPriorityProcess != null) {
                readyQueue.remove(highestPriorityProcess); // Remove from ready queue

                // Calculate times for this process
                highestPriorityProcess.startTime = currentTime;
                highestPriorityProcess.completionTime = currentTime + highestPriorityProcess.burstTime;
                highestPriorityProcess.turnAroundTime = highestPriorityProcess.completionTime - highestPriorityProcess.arrivalTime;
                highestPriorityProcess.waitingTime = highestPriorityProcess.startTime - highestPriorityProcess.arrivalTime;

                currentTime = highestPriorityProcess.completionTime;
                completedProcesses++;
            } else {
                currentTime++; // If no process is ready, increment time
            }
        }

        // Display results
        System.out.println("ID  Arrival  Burst  Priority  Start  Completion  Waiting  Turnaround");
        for (Process p : processes) {
            System.out.printf("%d    %d       %d      %d        %d        %d          %d       %d\n",
                    p.id, p.arrivalTime, p.burstTime, p.priority, p.startTime, p.completionTime, p.waitingTime, p.turnAroundTime);
        }
    }
}
