import java.util.*;

class SymbolTableEntry {
    String symbol;
    int address;
    boolean isDefined;

    public SymbolTableEntry(String symbol, int address, boolean isDefined) {
        this.symbol = symbol;
        this.address = address;
        this.isDefined = isDefined;
    }

    @Override
    public String toString() {
        return String.format("%-10s\t%-8d\t%-8s", symbol, address, isDefined ? "Y" : "N");
    }
}

class LiteralTableEntry {
    String literal;
    int address;
    boolean isAssigned;

    public LiteralTableEntry(String literal, int address, boolean isAssigned) {
        this.literal = literal;
        this.address = address;
        this.isAssigned = isAssigned;
    }

    @Override
    public String toString() {
        return String.format("%-15s\t%-8d\t%-8s", literal, address, isAssigned ? "Y" : "N");
    }
}

public class PassIOfTwoPassAssembler {
    private static final Map<String, Integer> OPTAB = new HashMap<>();
    private static final Map<String, Integer> REGTAB = new HashMap<>();
    private static final Map<String, Integer> CONDTAB = new HashMap<>();
    private static final Map<String, Integer> ADTAB = new HashMap<>();

    private Map<String, SymbolTableEntry> symbolTable = new HashMap<>();
    private Map<String, LiteralTableEntry> literalTable = new HashMap<>();
    private List<String> intermediateCode = new ArrayList<>();
    private int locationCounter = 100;  // Default location counter for START directive

    public PassIOfTwoPassAssembler() {
        initializeTables();
    }

    private void initializeTables() {
        OPTAB.put("STOP", 0);
        OPTAB.put("ADD", 1);
        OPTAB.put("SUB", 2);
        OPTAB.put("MULT", 3);
        OPTAB.put("MOVER", 4);
        OPTAB.put("MOVEM", 5);
        OPTAB.put("COMP", 6);
        OPTAB.put("BC", 7);
        OPTAB.put("DIV", 8);
        OPTAB.put("READ", 9);
        OPTAB.put("PRINT", 10);

        REGTAB.put("AREG", 1);
        REGTAB.put("BREG", 2);
        REGTAB.put("CREG", 3);
        REGTAB.put("DREG", 4);

        CONDTAB.put("LT", 1);
        CONDTAB.put("LE", 2);
        CONDTAB.put("EQ", 3);
        CONDTAB.put("GT", 4);
        CONDTAB.put("GE", 5);
        CONDTAB.put("ANY", 6);

        ADTAB.put("START", 1);
        ADTAB.put("END", 2);
        ADTAB.put("ORIGIN", 3);
        ADTAB.put("EQU", 4);
        ADTAB.put("LTORG", 5);
    }

    public void pass1(String inputCode) {
        String[] lines = inputCode.split("\n");

        for (String line : lines) {
            processLine(line.trim());
        }

        handleLiterals(); // Process any remaining literals
        displayOutput();  // Display output on console
    }

    private void processLine(String line) {
        if (line.isEmpty()) return;

        String[] parts = line.split("\\s+");
        int index = 0;
        String label = null;

        // Check for label (if it's not an instruction or directive)
        if (!parts[0].equals("START") && !OPTAB.containsKey(parts[0]) && !ADTAB.containsKey(parts[0])) {
            label = parts[0];
            symbolTable.put(label, new SymbolTableEntry(label, locationCounter, true));
            index++;
        }

        // Process operation
        String operation = parts[index];
        if (OPTAB.containsKey(operation)) {
            processInstruction(parts, index);
        } else if (ADTAB.containsKey(operation)) {
            processDirective(parts, index);
        }
        locationCounter++;
    }

    private void processInstruction(String[] parts, int index) {
        String operation = parts[index];
        StringBuilder ic = new StringBuilder();
        ic.append("(IS,").append(String.format("%02d", OPTAB.get(operation))).append(") ");
        
        // Process operands
        if (index + 1 < parts.length) {
            if (REGTAB.containsKey(parts[index + 1])) {
                ic.append("(").append(REGTAB.get(parts[index + 1])).append(") ");
            }

            if (index + 2 < parts.length) {
                String operand = parts[index + 2];
                if (operand.startsWith("=")) { // Literal
                    processLiteral(operand);
                    ic.append("(L,").append(literalTable.size()).append(")");
                } else { // Symbol
                    if (!symbolTable.containsKey(operand)) {
                        symbolTable.put(operand, new SymbolTableEntry(operand, 0, false));
                    }
                    ic.append("(S,").append(symbolTable.size()).append(")");
                }
            }
        }

        intermediateCode.add(ic.toString());
        locationCounter++;
    }
    private void processDirective(String[] parts, int index) {
        String directive = parts[index];
        StringBuilder ic = new StringBuilder();
        ic.append("(AD,").append(String.format("%02d", ADTAB.get(directive))).append(") ");

        if (directive.equals("START")) {
            if (index + 1 < parts.length) {
                locationCounter = Integer.parseInt(parts[index + 1]);
                ic.append("(C,").append(locationCounter).append(")");
            }
        } else if (directive.equals("LTORG")) {
            handleLiterals();
        } else if (directive.equals("END")) {
            handleLiterals();
        }

        intermediateCode.add(ic.toString());
    }

    private void processLiteral(String literal) {
        if (!literalTable.containsKey(literal)) {
            literalTable.put(literal, new LiteralTableEntry(literal, 0, false));
        }
    }

    private void handleLiterals() {
        for (Map.Entry<String, LiteralTableEntry> entry : literalTable.entrySet()) {
            if (!entry.getValue().isAssigned) {
                entry.getValue().address = locationCounter;
                entry.getValue().isAssigned = true;
                locationCounter++;
            }
        }
    }

    private void displayOutput() {
        // Display Symbol Table
        System.out.println("Symbol    \tAddress \tDefined");
        for (SymbolTableEntry entry : symbolTable.values()) {
            System.out.println(entry);
        }

        // Display Literal Table
        System.out.println("\nLiteral        \tAddress \tAssigned");
        for (LiteralTableEntry entry : literalTable.values()) {
            System.out.println(entry);
        }

        // Display Intermediate Code
        System.out.println("\nIntermediate Code:");
        for (String code : intermediateCode) {
            System.out.println(code);
        }
    }

    public static void main(String[] args) {
        PassIOfTwoPassAssembler assembler = new PassIOfTwoPassAssembler();
        
        String inputCode = "START 100\n" +
                           "LABEL1 ADD AREG BREG\n" +
                           "MOVEM AREG =5\n" +
                           "LTORG\n" +
                           "END";
        
        assembler.pass1(inputCode);  // Pass 1 for the given input code
    }
}




//Two pass assembler working:
//
//work:translate assembly code into machine code in two phases/passes;
//pass 1: objective:to gather information about labels,symbols and literals through scanning of assembly code;
//        output:building symbol,literal table,incrementing location counter (calculates memory address for each instruction),ignores forward references;
//               it creates intermediate files where placeholders for instructions show those addresses are not resolved yet;
//pass 2: objective:assembler uses symbol and literal table created in pass 1 for generation of the machine code in pass II respectively;
//       output:it resolve forward references and create machine code;
//
//Symbols: These are identifiers that represent addresses or values. In Pass I, symbols are typically stored in a symbol table with their addresses resolved in the final pass.
//
//Literals: These are constant values specified in the program. Literals are often handled using a literal table that records their addresses, typically allocated at the end of the program. In Pass I, literals are identified, but their addresses are resolved in Pass II.
//
//Assembly Directives: These are commands for the assembler that control aspects like memory allocation and sectioning. They are not executable instructions. In Pass I, directives like ORG, END, and EQU are processed to help set up the structure of the program.
//
//Labels: These are symbols that represent specific memory locations, often marking the start of instructions or data definitions. Labels are processed in Pass I to map their addresses for use in Pass II.